from pyspark.sql import functions as F

BLOOD_PRESSURE_RANGE = {'min': 0, 'max': 375}
GLUCOSE_RANGE = {'min': 0, 'max': 2200}
BILIRUBIN_RANGE = {'min': 0, 'max': 66}

get_features = lambda: (
    # this cannot be usual const because F.col requires active spark context
    {
        'name': 'DBP',
        'codes': [8368, 220051, 225310, 8555, 8441, 220180, 8502,
                  8440, 8503, 8504, 8507, 8506, 224643, 227242],
        'outliers': 'remove',
        **BLOOD_PRESSURE_RANGE
    },
    {
        'name': 'SBP',
        'codes': [51, 220050, 225309, 6701, 455, 220179, 3313, 3315,
                  442, 3317, 3323, 3321, 224167, 227243],
        **BLOOD_PRESSURE_RANGE,
        'outliers': 'remove',
    },
    {
        'name': 'MBP',
        'codes': [52, 220052, 225312, 224, 6702, 224322, 456, 220181,
                  3312, 3314, 3316, 3322, 3320, 443],
        **BLOOD_PRESSURE_RANGE,
        'outliers': 'remove',
    },
    {
        'name': 'GCS_eye',  # FIXME: GCS are categorical data!
        'codes': [184, 220739],
        'categorical': True,
    },
    {
        'name': 'GCS_motor',
        'codes': [454, 223901],
        'categorical': True,
    },
    {
        'name': 'GCS_verbal',
        'codes': [723, 223900],
        'categorical': True,
    },
    {
        'name': 'HR',
        'codes': [211, 220045],
        'min': 0,
        'max': 390,
        'outliers': 'remove',
    },
    {
        'name': 'RR',
        'codes': [618, 220210, 3603, 224689, 614, 651, 224422, 615,
                  224690, 619, 224688, 227860, 227918],
        'min': 0,
        'max': 330,
        'outliers': 'remove',
    },
    {
        # Celsius
        'name': 'Temperature',
        'codes': [3655, 677, 676, 223762],
        'outliers': 'remove',
        'min': 14.2,
        'max': 47,
    },
    {
        # Fahrenheit
        'name': 'Temperature',
        'codes': [223761, 678, 679, 3654],
        'select': (F.col('value') - 32) * 5 / 9,
        'min': 14.2,
        'max': 47,
        'outliers': 'remove',
    },
    {
        # weight kg
        'name': 'Weight',
        'codes': [224639, 226512, 226846, 763],
        'min': 0,
        'max': 300,
        'outliers': 'remove',
    },
    {
        # weight lb
        'name': 'Weight',
        'codes': [226531],
        'select': F.col('value') * 0.453592,
        'min': 0,
        'max': 300,
        'outliers': 'remove',
    },
    {
        # height cm
        'name': 'Height',
        'codes': [226730],
        'min': 0,
        'max': 275,
        'outliers': 'remove',
    },
    {
        'name': 'Height',
        'codes': [1394, 226707],
        'select': F.col('value') * 2.54,
        'min': 0,
        'max': 275,
        'outliers': 'remove',
    },
    {
        'name': 'FiO2',
        'codes': [3420, 223835, 3422, 189, 727, 190],
        'select': F.when(F.col('value') > 1,
                         F.col('value') / 100).otherwise(F.col('value')),
        'min': 0.2,
        'max': 1,
        'outliers': 'remove',
    },
    {
        'name': 'CRR',
        'codes': [3348, 115, 8377, 224308, 223951],
        'select': F.when((F.col('value') == 'Normal <3 Seconds') | (
            F.col('value') == 'Normal <3 secs'), 0)
        .when((F.col('value') == 'Abnormal >3 Seconds') | (
            F.col('value') == 'Abnormal >3 secs'), 1)
        .otherwise(None),
        'categorical': True,
    },
    {
        'name': 'Glucose (Blood)',
        'codes': [225664, 1529, 811, 807, 3745, 50809],
        **GLUCOSE_RANGE,
        'outliers': 'remove',
    },
    {
        'name': 'Glucose (Whole Blood)',
        'codes': [226537],
        **GLUCOSE_RANGE,
        'outliers': 'remove',
    },
    {
        'name': 'Glucose (Serum)',
        'codes': [220621, 50931],
        **GLUCOSE_RANGE,
        'outliers': 'remove',
    },
    {
        'name': 'Bilirubin (Total)',
        'codes': [50885],
        **BILIRUBIN_RANGE,
        'outliers': 'remove',
    },
    {
        'name': 'Bilirubin (Direct)',
        'codes': [50883],
        **BILIRUBIN_RANGE,
        'outliers': 'remove',
    },
    {
        'name': 'Bilirubin (Indirect)',
        'codes': [50884],
        **BILIRUBIN_RANGE,
        'outliers': 'remove',
    },
    {
        'name': 'O2 Saturation',
        'codes': [834, 50817, 8498, 220227, 646, 220277],
        'min': 0,
        'max': 100,
        'outliers': 'remove',
    },
    {
        'name': 'Sodium',
        'codes': [50983, 50824],
        'min': 0,
        'max': 250,
        'outliers': 'remove',
    },
    {
        'name': 'Potassium',
        'codes': [50971, 50822],
        'min': 0,
        'max': 15,
        'outliers': 'remove',
    },
    {
        'name': 'Magnesium',
        'codes': [50960],
        'min': 0,
        'max': 22,
        'outliers': 'remove',
    },
    {
        'name': 'Phosphate',
        'codes': [50970],
        'min': 0,
        'max': 22,
        'outliers': 'remove',
    },
    {
        'name': 'Calcium Total',
        'codes': [50893],
        'min': 0,
        'max': 40,
        'outliers': 'remove',
    },
    {
        'name': 'Calcium Free',
        'codes': [50808],
        'min': 0,
        'max': 10,
        'outliers': 'remove',
    },
    {
        'name': 'WBC',
        'codes': [51301, 51300],
        'min': 0,
        'max': 1100,
        'outliers': 'remove',
    },
    {
        'name': 'Hct',
        'codes': [50810, 51221],
        'min': 0,
        'max': 100,
        'outliers': 'remove',
    },
    {
        'name': 'Hgb',
        'codes': [51222, 50811],
        'min': 0,
        'max': 30,
        'outliers': 'remove',
    },
    {
        'name': 'Chloride',
        'codes': [50902, 50806],
        'min': 0,
        'max': 200,
        'outliers': 'remove',
    },
    {
        'name': 'Bicarbonate',
        'codes': [50882, 50803],
        'min': 0,
        'max': 66,
        'outliers': 'remove',
    },
    {
        'name': 'ALT',
        'codes': [50861],
        'min': 0,
        'max': 11000,
        'outliers': 'remove',
    },
    {
        'name': 'ALP',
        'codes': [50863],
        'min': 0,
        'max': 4000,
        'outliers': 'remove',
    },
    {
        'name': 'AST',
        'codes': [50878],
        'min': 0,
        'max': 22000,
        'outliers': 'remove',
    },
    {
        'name': 'Albumin',
        'codes': [50862],
        'min': 0,
        'max': 10,
        'outliers': 'remove',
    },
    {
        'name': 'Lactate',
        'codes': [50813],
        'min': 0,
        'max': 3,
        'outliers': 'remove',
    },
    {
        'name': 'LDH',
        'codes': [50954],
        'min': 0,
        'max': 35000,
        'outliers': 'remove',
    },
    {
        'name': 'SG Urine',
        'codes': [51498],
        'min': 0,
        'max': 2,
        'outliers': 'remove',
    },
    {
        'name': 'pH Urine',
        'codes': [51491, 51094, 220734, 1495, 1880, 1352, 6754, 7262],
        'min': 0,
        'max': 14,
        'outliers': 'remove',
    },
    {
        'name': 'pH Blood',
        'codes': [50820],
        'min': 0,
        'max': 14,
        'outliers': 'remove',
    },
    {
        'name': 'PO2',
        'codes': [50821],
        'min': 0,
        'max': 770,
        'outliers': 'remove',
    },
    {
        'name': 'PCO2',
        'codes': [50818],
        'min': 0,
        'max': 220,
        'outliers': 'remove',
    },
    {
        'name': 'Total CO2',
        'codes': [50804],
        'min': 0,
        'max': 65,
        'outliers': 'remove',
    },
    {
        'name': 'Base Excess',
        'codes': [50802],
        'min': -31,
        'max': 28,
        'outliers': 'remove',
    },
    {
        'name': 'Monocytes',
        'codes': [51254],
        'min': 0,
        'max': 100,
        'outliers': 'remove',
    },
    {
        'name': 'Basophils',
        'codes': [51146],
        'min': 0,
        'max': 100,
        'outliers': 'remove',
    },
    {
        'name': 'Eoisinophils',
        'codes': [51200],
        'min': 0,
        'max': 100,
        'outliers': 'remove',
    },
    {
        'name': 'Neutrophils',
        'codes': [51256],
        'min': 0,
        'max': 100,
        'outliers': 'remove',
    },
    {
        'name': 'Lymphocytes',
        'codes': [51244, 51245],
        'min': 0,
        'max': 100,
        'outliers': 'remove',
    },
    {
        'name': 'Lymphocytes (Absolute)',
        'codes': [51133],
        'min': 0,
        'max': 25000,
        'outliers': 'remove',
    },
    {
        'name': 'PT',
        'codes': [51274],
        'min': 0,
        'max': 150,
        'outliers': 'remove',
    },
    {
        'name': 'PTT',
        'codes': [51275],
        'min': 0,
        'max': 150,
        'outliers': 'remove',
    },
    {
        'name': 'INR',
        'codes': [51237],
        'min': 0,
        'max': 150,
        'outliers': 'remove',
    },
    {
        'name': 'Anion Gap',
        'codes': [50868],
        'min': 0,
        'max': 55,
        'outliers': 'remove',
    },
    {
        'name': 'BUN',
        'codes': [51006],
        'min': 0,
        'max': 275,
        'outliers': 'remove',
    },
    {
        'name': 'Creatinine Blood',
        'codes': [50912],
        'min': 0,
        'max': 66,
        'outliers': 'remove',
    },
    {
        'name': 'Creatinine Urine',
        'codes': [51082],
        'min': 0,
        'max': 650,
        'outliers': 'remove',
    },
    {
        'name': 'MCH',
        'codes': [51248],
        'min': 0,
        'max': 50,
        'outliers': 'remove',
    },
    {
        'name': 'MCHC',
        'codes': [51249],
        'min': 0,
        'max': 50,
        'outliers': 'remove',
    },
    {
        'name': 'MCV',
        'codes': [51250],
        'min': 0,
        'max': 150,
        'outliers': 'remove',
    },
    {
        'name': 'RDW',
        'codes': [51277],
        'min': 0,
        'max': 37,
        'outliers': 'remove',
    },
    {
        'name': 'Platelet Count',
        'codes': [51265],
        'min': 0,
        'max': 2200,
        'outliers': 'remove',
    },
    {
        'name': 'RBC',
        'codes': [51279],
        'min': 0,
        'max': 14,
        'outliers': 'remove',
    },
    {
        'name': 'Intubated',
        'codes': [50812],
        'select': (F.when(F.col('value') == 'INTUBATED', 1)
                   .when(F.col('value') == 'NOT INTUBATED', 0)),
        'categorical': True,
    },
    
    # OUTPUTEVENTS
    
    # TODO: target column for all outputevents VALUE
    # TODO: for all outputevents, replace outliers with median
    {
        'name': 'Ultrafiltrate',
        'codes': [40286],
        'min': 0,
        'max': 7000,
        'outliers': 'replace_with_median',
    },
    {
        'name': 'Urine',
        # see get_urine_itemids
        'codes': [42817, 226560, 42666, 41510, 42119, 45991, 40061, 40288, 44911, 40405, 45927,
                  42068, 42130, 46658, 42362, 42556, 40096, 226559, 226564, 44229, 43931, 40055,
                  44325, 44253, 44834, 227701, 42001, 46732, 40065, 42592, 46748, 44676, 42507,
                  44080, 46578, 42700, 46532, 41247, 226627, 46539, 40428, 43093, 41184, 40473,
                  40056, 44824, 44837, 46755, 44132, 42676, 44278, 40534, 40715, 44103, 45415,
                  44925, 227489, 42765, 42510, 42892, 43053, 41857, 40057, 45841, 40094, 41177,
                  41868, 42463, 42366, 43897, 46727, 42111, 226631, 226561, 44506, 46804, 42042,
                  42810, 40069, 42859, 45971, 45804, 44051, 40085, 44684, 43042, 40651, 46177,
                  41922, 41839, 46180, 43987, 226565, 44313, 42209, 44752],
        'min': 0,
        'max': 2500,
        'outliers': 'replace_with_median',
    },
    {
        'name': 'Stool',
        # see get_stool_itemids
        'codes': [40054, 40388, 40053, 40367, 40063, 40087, 40751, 40068, 40289, 40991, 41433,
                  44266, 45337, 45992, 46186, 226579, 226580, 226583],
        'min': 0,
        'max': 4000,
        'outliers': 'replace_with_median',
    },
    {
        'name': 'Chest Tube',
        # see get_chest_tube_itemids
        'codes': [41838, 45227, 42540, 43984, 41003, 42516, 42256, 42498, 45405, 42258, 42539,
                  40050, 42101, 43857, 45417, 46237, 40091, 40048, 41584, 226588, 42255, 41681,
                  45664, 226589, 40090, 45813, 45883, 40084, 40049, 42257, 41707, 40076, 226593,
                  226590, 226591, 226595, 226592],
        'min': 0,
        'max': 2500,
        'outliers': 'replace_with_median',
    },
    {
        'name': 'Gastric',
        'codes': [40059, 40052, 226576, 226575, 226573, 40051, 226630],
        'min': 0,
        'max': 4000,
        'outliers': 'replace_with_median',
    },
    {
        'name': 'EBL',
        'codes': [40064, 226626, 40491, 226629],
        'min': 0,
        'max': 10000,
        'outliers': 'replace_with_median',
    },
    {
        'name': 'Emesis',
        'codes': [40067, 226571, 40490, 41015, 40427],
        'min': 0,
        'max': 2000,
        'outliers': 'replace_with_median',
    },
    {
        'name': 'Jackson-Pratt',
        # see get_jackson_pratt_itemids
        'codes': [40072, 40088, 40071, 40092, 41213, 41214, 42824, 42823, 226599, 226600, 226602,
                  226601],
        'min': 0,
        'max': 2000,
        'outliers': 'replace_with_median',
    },
    {
        'name': 'Residual',
        'codes': [227510, 227511, 42837, 43892, 44909, 44959],
        'min': 0,
        'max': 1050,
        'outliers': 'replace_with_median',
    },
    {
        'name': 'Pre-admission Output',
        'codes': [40060, 226633],
        'min': 0,
        'max': 13000,
        'outliers': 'replace_with_median',
    },
    # INPUTEVENTS
    {
        'name': 'Vasopressin',
        'codes': [30051, 222315],
        # 'select': F.when(  # Fixme: remove this complex selector and just filter outliers out
        #     (F.col('value') == 0)
        #     | ((F.col('unit').isin(['U', 'units']))
        #        & (F.col('value').between(0, 400))),
        #     F.col('value'))
        # .otherwise(2.4), # median
        'min': 0,
        'max': 400,
        'filters': [
            ('unit', 'in', ['U', 'units']),
        ],
        'unit': 'units',
        'outliers': 'replace_with_median',
    },
    { # TODO: some values have dose unit
        'name': 'Vacomycin',
        'codes': [225798],
        # 'select': F.when(F.col('value').between(0, 8000), F.col('value'))
        # .otherwise(1000), # median
        'min': 0,
        'max': 8,
        'unit': 'g',  # TODO: this has to be converted to g from mg
        'outliers': 'replace_with_median',
    },
    {
        'name': 'Calcium Gluconate',
        'codes': [30023, 221456, 227525, 42504, 43070, 45699, 46591, 44346, 46291],
        'unit': 'g',  # TODO: this has to be converted to g from ['mg', 'gm', 'grams']
        'min': 0,
        'max': 200,
        'outliers': 'replace_with_median',
    },
    {
        'name': 'Furosemide',
        'codes': [30123, 221794, 228340],
        'min': 0,
        'max': 250,
        # 'range': [
        #     ('value', '>=', 0),
        #     ('value', '<=', 250),
        #     # ('unit', '==', 'mg'), # TODO: or any other if value is 0, but shouldn't we just filter them out?
        # ],
        'units': 'mg',
        'outliers': 'replace_with_median',
    },
    { # boolean type
        'name': 'Famotidine',
        'codes': [225907],
        'min': 0,
        'max': 1,
        # 'range': [
        #     ('value', '>=', 0),
        #     ('value', '<=', 1),
        #     ('unit', '==', 'dose'),
        # ],
        'unit': 'dose',
        'outliers': 'replace_with_median',
    },
    { # boolean type
        'name': 'Piperacillin',
        'codes': [225893, 225892],
        'min': 0,
        'max': 1,
        # 'range': [
        #     ('value', '>=', 0),
        #     ('value', '<=', 1),
        #     ('unit', '==', 'dose'),
        # ],
        'outliers': 'replace_with_median',
    },
    {
        'name': 'Cefazolin',
        'codes': [225850],
        'unit': 'dose',
        'min': 0,
        'max': 2,
        'outliers': 'replace_with_median',
    },
    {
        'name': 'Fiber',
        'codes': [225936, 30166, 30073, 227695, 30088, 225928, 226051, 226050, 226048, 45381, 45597,
                  227699, 227696, 44218, 45406, 44675, 226049, 44202, 45370, 227698, 226027, 42106,
                  43994, 45865, 44318, 42091, 44699, 44010, 43134, 44045, 43088, 42641, 45691,
                  45515, 45777, 42663, 42027, 44425, 45657, 45775, 44631, 44106, 42116, 44061,
                  44887, 42090, 42831, 45541, 45497, 46789, 44765, 42050],
        'unit': 'ml',
        'min': 0,
        'max': 1600,
        'outliers': 'replace_with_median',
    },
    { # boolean type
        'name': 'Pantoprazole',
        'codes': [225910, 40549, 41101, 41583, 44008, 40700, 40550],
        'unit': 'dose',
        'select': F.lit(1),
    },
    {
        'name': 'Magnesium Sulphate',
        'codes': [222011, 30027, 227524],
        'unit': 'g',  # TODO: assume unit in ['gm', 'grams', 'mg']
        'min': 0,
        'max': 125,
        'outliers': 'replace_with_median',
    },
    {
        'name': 'KCl',
        'codes': [30026, 225166, 227536],
        'unit': 'mEq',
        'min': 0,
        'max': 501,
        'outliers': 'replace_with_median',
    },
    
    {
        'name': 'Heparin',
        'codes': [30025, 225975, 225152],
        'min': 0,
        'max': 25300,
        'unit': 'units',  # expected units in ['U', 'units'],
        'outliers': 'replace_with_median',
    },
    {'name': 'Midazolam', 'codes': [30124, 221668], 'min': 0, 'max': 500,
     'outliers': 'replace_with_median', },
    {'name': 'Propofol', 'codes': [30131, 222168], 'min': 0, 'max': 12000,
     'outliers': 'replace_with_median', },
    {'name': 'Albumin 25%', 'codes': [220862, 30009], 'min': 0, 'max': 750,
     'outliers': 'replace_with_median', },
    {'name': 'Albumin 5%', 'codes': [220864, 30008], 'min': 0, 'max': 1300,
     'outliers': 'replace_with_median', },
    {'name': 'Fresh Frozen Plasma', 'codes': [30005, 220970], 'min': 0, 'max': 33000,
     'outliers': 'replace_with_median', },
    {'name': 'Lorazepam', 'codes': [30141, 221385], 'min': 0, 'max': 300,
     'outliers': 'replace_with_median', },
    {'name': 'Morphine Sulfate', 'codes': [30126, 225154], 'min': 0, 'max': 4000,
     'outliers': 'replace_with_median', },
    {'name': 'Gastric Meds', 'codes': [30144, 225799], 'min': 0, 'max': 7000,
     'outliers': 'replace_with_median', },
    {'name': 'Lactated Ringers', 'codes': [30021, 225828], 'min': 0, 'max': 17000,
     'outliers': 'replace_with_median', },
    {'name': 'Milrinone', 'codes': [30125, 221986], 'min': 0, 'max': 50,
     'outliers': 'replace_with_median', },
    {'name': 'OR/PACU Crystalloid', 'codes': [30101, 226364, 30108, 226375], 'min': 0, 'max': 22000,
     'outliers': 'replace_with_median', },
    {'name': 'Packed RBC', 'codes': [30001, 225168, 30104, 226368, 227070], 'min': 0, 'max': 17250,
     'outliers': 'replace_with_median', },
    {'name': 'PO intake', 'codes': [30056, 226452, 30109, 226377], 'min': 0, 'max': 11000,
     'outliers': 'replace_with_median', },
    {'name': 'Neosynephrine', 'codes': [30128, 221749, 30127], 'min': 0, 'max': 1200,
     'outliers': 'replace_with_median', },
    {'name': 'Piggyback', 'codes': [226089, 30063], 'min': 0, 'max': 1000,
     'outliers': 'replace_with_median', },
    {'name': 'Nitroglycerine', 'codes': [30121, 222056, 30049], 'min': 0, 'max': 350,
     'outliers': 'replace_with_median', },
    {'name': 'Nitroprusside', 'codes': [30050, 222051], 'min': 0, 'max': 430,
     'outliers': 'replace_with_median', },
    {'name': 'Metoprolol', 'codes': [225974], 'min': 0, 'max': 151,
     'outliers': 'replace_with_median', },
    {'name': 'Norepinephrine', 'codes': [30120, 221906, 30047], 'min': 0, 'max': 80,
     'outliers': 'replace_with_median', },
    {'name': 'Colloid', 'codes': [30102, 226365, 30107, 226376], 'min': 0, 'max': 20000,
     'outliers': 'replace_with_median', },
    {'name': 'Hydralazine', 'codes': [221828], 'min': 0, 'max': 80,
     'outliers': 'replace_with_median', },
    {'name': 'GT Flush', 'codes': [226453, 30059], 'min': 0, 'max': 2100,
     'outliers': 'replace_with_median', },
    {'name': 'Hydromorphone', 'codes': [30163, 221833], 'min': 0, 'max': 125,
     'outliers': 'replace_with_median', },
    {'name': 'Fentanyl', 'codes': [225942, 30118, 221744, 30149], 'min': 0, 'max': 20,
     'outliers': 'replace_with_median', },
    {'name': 'Insulin Regular', 'codes': [30045, 223258, 30100], 'min': 0, 'max': 1500,
     'outliers': 'replace_with_median', },
    {'name': 'Insulin Humalog', 'codes': [223262], 'min': 0, 'max': 340,
     'outliers': 'replace_with_median', },
    {'name': 'Insulin largine', 'codes': [223260], 'min': 0, 'max': 150,
     'outliers': 'replace_with_median', },
    {'name': 'Insulin NPH', 'codes': [223259], 'min': 0, 'max': 100,
     'outliers': 'replace_with_median', },
    {'name': 'Unknown', 'codes': [30140], 'min': 0, 'max': 1100,
     'outliers': 'replace_with_median', },
    {'name': 'D5W', 'codes': [30013, 220949], 'min': 0, 'max': 11000,
     'outliers': 'replace_with_median', },
    {'name': 'Dextrose Other',
     'codes': [30015, 225823, 30060, 225825, 220950, 30016, 30061, 225827, 225941, 30160, 220952,
               30159, 30014, 30017, 228142, 228140, 45360, 228141, 41550],
     'min': 0, 'max': 4000, 'outliers': 'replace_with_median', },
    {'name': 'Normal Saline', 'codes': [225158, 30018], 'min': 0, 'max': 11000,
     'outliers': 'replace_with_median', },
    {'name': 'Half Normal Saline', 'codes': [30020, 225159], 'min': 0, 'max': 2000,
     'outliers': 'replace_with_median', },
    {'name': 'Sterile Water', 'codes': [225944, 30065], 'min': 0, 'max': 10000,
     'outliers': 'replace_with_median', },
    {'name': 'Free Water',
     'codes': [30058, 225797, 41430, 40872, 41915, 43936, 41619, 42429, 44492, 46169, 42554],
     'min': 0, 'max': 2500, 'outliers': 'replace_with_median', },
    {'name': 'Solution', 'codes': [225943], 'min': 0, 'max': 1500,
     'outliers': 'replace_with_median', },
    {'name': 'Dopamine', 'codes': [30043, 221662], 'min': 0, 'max': 1300,
     'outliers': 'replace_with_median', },
    {'name': 'Epinephrine', 'codes': [30119, 221289, 30044], 'min': 0, 'max': 100,
     'outliers': 'replace_with_median', },
    {'name': 'Amiodarone', 'codes': [30112, 221347, 228339, 45402], 'min': 0, 'max': 1200,
     'outliers': 'replace_with_median', },
    {'name': 'TPN', 'codes': [30032, 225916, 225917, 30096], 'min': 0, 'max': 1600,
     'outliers': 'replace_with_median', },
    {'name': 'Magnesium Sulfate (Bolus)', 'codes': [227523], 'min': 0, 'max': 250,
     'outliers': 'replace_with_median', },
    {'name': 'KCl (Bolus)', 'codes': [227522], 'min': 0, 'max': 500,
     'outliers': 'replace_with_median', },
    {'name': 'Pre-admission Intake', 'codes': [30054, 226361], 'min': 0, 'max': 30000,
     'outliers': 'replace_with_median', }
)
